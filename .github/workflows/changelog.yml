name: Generate Changelog

on:
  release:
    types: [published]

jobs:
  changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            // Get commits since the last release
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 2
            });

            let sinceDate;
            if (releases.length > 1) {
              // Get the previous release date
              const previousRelease = releases[1];
              sinceDate = new Date(previousRelease.published_at);
            } else {
              // If this is the first release, get commits from the last 7 days
              sinceDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
            }

            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              since: sinceDate.toISOString(),
              per_page: 100
            });

            const changes = commits
              .filter(commit => !commit.commit.message.includes('chore: bump version'))
              .filter(commit => !commit.commit.message.includes('Merge'))
              .map(commit => `- ${commit.commit.message.split('\n')[0]}`)
              .join('\n');

            console.log('Generated changelog:', changes);
            return changes || '- No significant changes';

      - name: Update release notes
        uses: actions/github-script@v7
        with:
          script: |
            const changelog = '${{ steps.changelog.outputs.result }}';
            console.log('Changelog to update:', changelog);

            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });

            if (releases.length > 0) {
              const latestRelease = releases[0];
              console.log('Updating release:', latestRelease.id);
              
              const updatedBody = `${latestRelease.body}\n\n## Recent Changes\n${changelog}`;
              
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: latestRelease.id,
                body: updatedBody
              });
              
              console.log('Release updated successfully');
            } else {
              console.log('No releases found');
            }
